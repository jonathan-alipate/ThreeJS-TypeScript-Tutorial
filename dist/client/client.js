import * as THREE from '/build/three.module.js';
import { OrbitControls } from '/jsm/controls/OrbitControls';
import Stats from '/jsm/libs/stats.module';
import { GUI } from '/jsm/libs/dat.gui.module';
const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(75, 200 / 200, 0.1, 10);
camera.position.z = 2;
const canvas = document.getElementById('c1');
const renderer = new THREE.WebGLRenderer({ canvas: canvas });
renderer.setSize(200, 200);
const controls = new OrbitControls(camera, canvas);
const geometry = new THREE.BoxGeometry();
const material = new THREE.MeshBasicMaterial({ color: 0x00ff00, wireframe: true });
const cube = new THREE.Mesh(geometry, material);
scene.add(cube);
const stats = Stats();
document.body.appendChild(stats.dom);
const gui = new GUI();
const cubeFolder = gui.addFolder("Cube");
cubeFolder;
cubeFolder.add(cube.rotation, 'x', 0, Math.PI * 2, 0.01);
cubeFolder.add(cube.rotation, 'y', 0, Math.PI * 2, 0.01);
cubeFolder.add(cube.rotation, 'z', 0, Math.PI * 2, 0.01);
cubeFolder.open();
const cameraFolder = gui.addFolder("Camera");
cameraFolder.add(camera.position, 'z', 0, 10, 0.01);
cubeFolder.open();
var animate = function () {
    requestAnimationFrame(animate);
    cube.rotation.x += 0.01;
    cube.rotation.y += 0.01;
    controls.update();
    renderer.render(scene, camera);
    stats.update();
};
animate();
